<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

<!-- 
	System.out.println()의 문제점
	- 운영시 불필요한 로그가 계속 출력(리소스 낭비)
	- 모든 로그 삭제 시 에러 원인 찾기 어려움
	- 성능 저하
	
	Log4j : 자바기반 로깅 유틸리티로 Apache에서 만든 오픈소스 라이브러리
	- 옵션 설정을 통해 선택적으로 로그를 남기거나 특정 파일에 로그를 생성하는 등 다양한 이점을 가지고 있다.
	- 시스템 성능에 큰 영향을 미치지 않는다.
	
	Log4j 레벨(level value에 적혀있는 값)
	- FATAL : 아주 심각한 에러가 발생한 상태
	- ERROR : 어떠한 요청을 처리하는 중 문제가 발생한 상태
	- WARN : 프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될 수 있는 경고성 메시지
	- INFO : 어떠한 상태변경과 같은 정보성 메시지
	- DEBUG : 개발시 디버그 용도로 사용하는 메시지
	- TRACE : 디버그 레벨이 너무 광범위한 것을 해결하기 위해 좀 더 상세한 이벤트를 나타냄
	
	위의 순서대로 높은 레벨을 가지며, 출력 레벨 설정에 따라 설정 레벨 이상의 로그 출력
	=> 출력 레벨이 INFO라고 설정했다면, INFO, WARN, ERROR, FATAL 출력
	
	Log4j 구성요소
	- logger : 출력할 메시지를 Appender에 전달
	- Appender : 전달된 로그를 어디에 출력할건지 결정
	- Layout : 로그를 어떤 형식으로 출력할 지 결정
 -->


<!-- 
	Appender : 로그의 출력 위치, 출력 형식 지정
	*** Appender 태그는 Logger 태그보다 위에 있어야 한다!!! ***
	- ConsoleAppender : org.apache.log4j.ConsoleAppender
						콘솔에 로그 메시지를 출력한다.
	- FilerAppender : org.apache.log4j.FilerAppender
					    로그 메시지를 지정된 파일에 기록한다.
	- RollingFileAppender : org.apache.log4j.RollingFileAppender
							파일 크기가 일정 수준 이상이 되면 기존 파일을 백업파일로 두고 처음부터 다시 기록한다.
	- DailyRollingFileAppender : org.apache.log4j.Daily.Rolling.File.Appender
								  일정 기간 단위로 로그 파일을 생성하고 기록한다.
								  
	Layout : 로그 출력 형태 지정, patternLayout을 이용하는 것이 가장 적합하다.
	conversionPattern 패턴 (* 표시는 성능에 영향을 줌)
	- %m : 로그 내용 출력
	- %p : debug, info, warn, error 등의 priority 출력
	- %r : 어플리케이션 시작 후 이벤트가 발생하는 시점까지의 경과시간(millisecond)
	- %c : package 출력
	- %C : *클래스명 출력 
	- %n : 개행문자(\n) 출력
	- %M : *로깅이 발생항 method 이름 출력
	- %F : *로깅이 발생한 프로그램 파일명 출력
	- %l : *로깅이 발생한 caller 정보 출력
	- %L : *로깅이 발생한 caller 라인수 출력
	- %x : 로깅이 발생한 thread와 관련된 NDC 출력
	- %X : 로깅이 발생한 thread와 관련된 MDC 출력
	- % : % 출력 표시
	- %t : 쓰레드 이름 출력
 -->
	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d %5p [%c] %m%n" />
		</layout>
	</appender>
	
	 <appender name="console-infolog" class="org.apache.log4j.ConsoleAppender">
          <layout class="org.apache.log4j.PatternLayout">
              <param name="ConversionPattern" value="%d %5p %m%n"/>
          </layout>  
    </appender>
	
	<!-- 
		Logger 
		- 실제 로그 기능을 수행하는 객체
		- name을 가지고 사용
		- 로그 출력 레벨 설정 가능
		- 0개 이상의 Appender를 지정 가능
		- 입력받은 로깅 메시지는 로그 레벨에 따라 Appender로 전달
		=> 기본적으로 최상위 logger인 Root logger을 설정해주어야 한다!!
		
		로그 이름 정리
		- jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument값으로 대체된 SQL문이 보여진다.
		- jdbc.sqltiming : SQL문과 해당 SQL문을 실행시키는 데 수행된 시간 정보(milliseconds)를 포함한다.
		- jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다.
						많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
		- jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
	-->
	<!-- Application Loggers -->
	<logger name="com" additivity="false">
		<level value="debug" />
		<appender-ref ref="console" />
	</logger>
	
	
	<!-- 3rdparty Loggers -->
	<!-- 
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	 -->

	<!-- Root Logger -->
	<root>
		<priority value="debug" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
